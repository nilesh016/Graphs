#Adjacency List Representation

Undirected unweighted Graph

#include<bits/stdc++.h>
using namespace std;

int main(){
    int vertex,edges;
    cin>>vertex>>edges;
    
    int u,v;
    vector<int>AdjList(vertex);
    
    for(int i=0;i<edges;i++){
        cin>>u>>v;
        AdjList[u].push_back(v);
        AdjList[v].push_back(u);
        
    }
    
    
    for(int i=0;i<vertex;i++){
        cout<<AdjList[i]<<" ->";
        for(int j=0;j<AdjList[i].size();j++){
            cout<<AdjList[i][j]<<" ";
        }
        cout<<endl;
    }
}


#undirected weighted graph
#include<bits/stdc++.h>
using namespace std;

int main(){
    int vertex,edges;
    cin>>vertex>>edges;
    
    int u,v,weights;
    vector<vector<pair<int,int>>>AdjList(vertex);
    
    for(int i=0;i<edges;i++){
        cin>>u>>v>>weights;
        AdjList[u].push_back(make_pair(v,weights));
        AdjList[v].push_back(make_pair(u,weights));
        
    }
    
    
    for(int i=0;i<vertex;i++){
        cout<< i <<" ->";
        for(int j=0;j<AdjList[i].size();j++){
            cout<<AdjList[i][j].first<<"->"<<AdjList[i][j].second<<" ";
        }
        cout<<endl;
    }
}


