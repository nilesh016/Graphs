#C++ code for undirected unweighted graph

Time Complexity :- O(V^2) 
Space Complexity:- O(V^2)

#include<bits/stdc++.h>
using namespace std;

int main(){
    int vertex,edge;
    cin>>vertex>>edge;
    
    vector<vector<bool>> AdjMatrix(vertex,vector<bool>(vertex,0));
    int u,v;
    
    for(int i=0;i<edge;i++){
        cin>>u>>v;
        AdjMatrix[u][v]=1;
        AdjMatrix[v][u]=1;
        
    }
    for(int i=0;i<vertex;i++){
        for(int j=0;j<vertex;j++){
            cout<<AdjMatrix[i][j]<<" ";
        }
        cout<<endl;
    }
    //return 0;
}


#C++ code undirected weighted graph
#include<bits/stdc++.h>
using namespace std;

int main(){
    int vertex,edge;
    cin>>vertex>>edge;
    
    vector<vector<int>> AdjMatrix(vertex,vector<int>(vertex,0));
    int u,v,weight;
    
    for(int i=0;i<edge;i++){
        cin>>u>>v>>weight;
        AdjMatrix[u][v]=weight;
        AdjMatrix[v][u]=weight;
        
    }
    for(int i=0;i<vertex;i++){
        for(int j=0;j<vertex;j++){
            cout<<AdjMatrix[i][j]<<" ";
        }
        cout<<endl;
    }
    //return 0;
}





#C++ code for directed unweighted graph

#include<bits/stdc++.h>
using namespace std;

int main(){
    int vertex,edge;
    cin>>vertex>>edge;
    
    vector<vector<bool>> AdjMatrix(vertex,vector<bool>(vertex,0));
    int u,v;
    
    for(int i=0;i<edge;i++){
        cin>>u>>v;
        AdjMatrix[u][v]=1;
        
        
    }
    for(int i=0;i<vertex;i++){
        for(int j=0;j<vertex;j++){
            cout<<AdjMatrix[i][j]<<" ";
        }
        cout<<endl;
    }
   return 0;
}


#similary for directed weighted graph
