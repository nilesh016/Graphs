#BFS traversal

Time Complexity;-O(V+E)=O(V+2E)
Space Complexity:O(V)

class Solution {
  public:
    // Function to return Breadth First Traversal of given graph.
    vector<int> bfs(vector<vector<int>> &adj) {
        // Code here
        int V=adj.size();
        queue<int>q;
        vector<bool>visited(V,0);
        vector<int> ans;
        
        q.push(0);
        visited[0]=1;
        int node;
        
        
        while(!q.empty()){
            node=q.front();
            q.pop();
            ans.push_back(node);
            
            for(int neighbour:adj[node]){
                if(!visited[neighbour]){
                    visited[neighbour]=true;
                    q.push(neighbour);
                }
            }
        }
        return ans;
    }
        
    };

Also valid
for (int j = 0; j < adj[node].size(); j++) {
    if (!visited[adj[node][j]]) {
        visited[adj[node][j]] = 1;
        q.push(adj[node][j]);
    }
}








#DFS TRAVERSAL

 Time complexity same as BFS as well as space


class Solution {
  public:
  
  void DFS(int node,vector<vector<int>> &adj,vector<bool> &visited,vector<int>&ans){
      visited[node]=1;
      ans.push_back(node);
      
      for(int neighbour:adj[node]){
          if(!visited[neighbour]){
              DFS(neighbour,adj,visited,ans);
          }
      }
  }
    vector<int> dfs(vector<vector<int>>& adj) {
        // Code here
        int V=adj.size();
        vector<bool>visited(V,0);
        vector<int>ans;
        DFS(0,adj,visited,ans);
        return ans;
    }
};
